plugins {
    id 'org.checkerframework' version '0.6.10' apply false
}

allprojects {

    group "me.sasanqua.utils"
    version "1.0.0"

    ext {
        spongeVersion = '7.4.0'
        forgeVersion = '1.12.2-14.23.5.2860'
        junitVersion = '5.7.1'
        checkerVersion = '3.21.4'
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spongepowered.org/maven' }
    }

}


subprojects {
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: 'org.checkerframework'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(8))
        }
    }

    jar {
        from project(":Common").sourceSets.getByName("main").output
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    dependencies {
        compileOnly "org.checkerframework:checker-qual:$checkerVersion"
        checkerFramework "org.checkerframework:checker:$checkerVersion"

        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    }

    test {
        useJUnitPlatform()
        maxHeapSize = '1G'
    }

    checkerFramework {
        checkers = ['org.checkerframework.checker.nullness.NullnessChecker']
        skipCheckerFramework = System.getenv("SKIP_CHECKER_FRAMEWORK") == null ? false : true
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }
    }

}

tasks.register("build") { task ->

    task.dependsOn subprojects*.build

    task.doFirst {
        copy {
            from subprojects.collect { file("./${it.name}/build/libs/${it.name}-${project.version}.jar") }
            eachFile {
                it.setName("${it.name.replace(".jar", "")}.jar")
            }
            into file("./build/libs/")
        }
    }

    task.doLast {
        delete {
            it.delete subprojects.collect { file("${it.name}/build/") }
        }
    }

}
